// Convert pixels to rem units
@function rem($pixels) {
    @return $pixels / 16px * 1rem;
}

// Convert pixels to em units
@function em($pixels, $context: 16px) {
    @return $pixels / $context * 1em;
}

// Strip units from a value
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

// Calculate contrast ratio between two colors
@function contrast-ratio($color1, $color2) {
    $l1: luminance($color1);
    $l2: luminance($color2);
    @return (max($l1, $l2) + 0.05) / (min($l1, $l2) + 0.05);
}

// Calculate relative luminance of a color
@function luminance($color) {
    $red: red($color) / 255;
    $green: green($color) / 255;
    $blue: blue($color) / 255;

    $red: if($red < 0.03928, $red / 12.92, pow(($red + 0.055) / 1.055, 2.4));
    $green: if($green < 0.03928, $green / 12.92, pow(($green + 0.055) / 1.055, 2.4));
    $blue: if($blue < 0.03928, $blue / 12.92, pow(($blue + 0.055) / 1.055, 2.4));

    @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

// Get a color from a nested map
@function color($color-name, $variant: 'base') {
    @return map-get(map-get($colors, $color-name), $variant);
}

// Generate spacing value from a scale
@function spacing($multiplier: 1) {
    @return $base-spacing * $multiplier;
}

// Clamp a value between min and max
@function clamp($value, $min, $max) {
    @return max($min, min($value, $max));
}
